From 8d3446fbd6c73710ef2ea6bfe46fd3b7a1a787a7 Mon Sep 17 00:00:00 2001
From: Tom Kaitchuck <Tom.Kaitchuck@gmail.com>
Date: Wed, 13 Jan 2021 21:56:02 -0800
Subject: [PATCH] Add support for aHash

---
 CMakeLists.txt |  1 +
 Hashes.h       |  5 +++++
 ahash.h        | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 main.cpp       |  2 +-
 4 files changed, 55 insertions(+), 1 deletion(-)
 create mode 100644 ahash.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3420a56..921d111 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -638,14 +638,15 @@ if(ipo_supported)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLTO")
   # set_source_files_properties(main.cpp PROPERTIES COMPILE_FLAGS "-DLTO")
 else()
   message(STATUS "IPO / LTO not supported: <${error}>")
 endif()
 
 target_link_libraries(SMHasher SMHasherSupport ${HIGHWAY_LIB} ${BLAKE3_LIB}
+                      libahash_c.a
                       ${CMAKE_THREAD_LIBS_INIT})
 
 # add_executable( bittest bittest.cpp )
 #
 # target_link_libraries( bittest SMHasherSupport ${CMAKE_THREAD_LIBS_INIT} )
 
 if(NOT (CMAKE_CROSSCOMPILING))
diff --git a/Hashes.h b/Hashes.h
index 472f4e4..9fae4e9 100644
--- a/Hashes.h
+++ b/Hashes.h
@@ -17,14 +17,15 @@
 #include "opt_cmetrohash.h"
 
 #if defined(__SSE4_2__) && defined(__x86_64__)
 #include "metrohash/metrohash64crc.h"
 #include "metrohash/metrohash128crc.h"
 #endif
 
+#include "ahash.h"
 #include "fasthash.h"
 #include "jody_hash32.h"
 #include "jody_hash64.h"
 
 // objsize: 0-0x113 = 276
 #include "tifuhash.h"
 // objsize: 5f0-85f = 623
@@ -356,14 +357,18 @@ inline void cmetrohash64_2_test ( const void * key, int len, uint32_t seed, void
 inline void fasthash32_test ( const void * key, int len, uint32_t seed, void * out ) {
   *(uint32_t*)out = fasthash32(key, (size_t) len, seed);
 }
 #ifdef HAVE_INT64
 inline void fasthash64_test ( const void * key, int len, uint32_t seed, void * out ) {
   *(uint64_t*)out = fasthash64(key, (size_t) len, (uint64_t)seed);
 }
+inline void ahash64_test ( const void * key, int len, uint32_t seed, void * out ) {
+  *(uint64_t*)out = ahash64(key, (size_t) len, (uint64_t)seed);
+}
+
 #endif
 
 // objsize 0-778: 1912
 void mum_hash_test(const void * key, int len, uint32_t seed, void * out);
 
 inline void mum_low_test ( const void * key, int len, uint32_t seed, void * out ) {
   uint64_t result;
diff --git a/ahash.h b/ahash.h
new file mode 100644
index 0000000..6c59caf
--- /dev/null
+++ b/ahash.h
@@ -0,0 +1,48 @@
+/* The MIT License
+
+   Copyright (C) 2012 Zilong Tan (eric.zltan@gmail.com)
+
+   Permission is hereby granted, free of charge, to any person
+   obtaining a copy of this software and associated documentation
+   files (the "Software"), to deal in the Software without
+   restriction, including without limitation the rights to use, copy,
+   modify, merge, publish, distribute, sublicense, and/or sell copies
+   of the Software, and to permit persons to whom the Software is
+   furnished to do so, subject to the following conditions:
+
+   The above copyright notice and this permission notice shall be
+   included in all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+   SOFTWARE.
+*/
+
+#ifndef _AHASH_H
+#define _AHASH_H
+
+#include <stdint.h>
+#include <stdio.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * Ahash - 64-bit implementation of aHash
+ * @buf:  data buffer
+ * @len:  data size
+ * @seed: the seed
+ */
+       uint64_t ahash64(const void *buf, size_t len, uint64_t seed);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
\ No newline at end of file
diff --git a/main.cpp b/main.cpp
index e9cf20d..ae3d273 100644
--- a/main.cpp
+++ b/main.cpp
@@ -302,15 +302,15 @@ HashInfo g_hashes[] =
   { MeowHash64_test,      64, 0xB04AC842, "MeowHash64low","MeowHash (requires x64 AES-NI)", POOR },
   { MeowHash128_test,    128, 0xA0D29861, "MeowHash",     "MeowHash (requires x64 AES-NI)", POOR },
 #endif
   { t1ha1_64le_test,      64, 0xD6836381, "t1ha1_64le",  "Fast Positive Hash (portable, aims 64-bit, little-endian)", POOR },
   { t1ha1_64be_test,      64, 0x93F864DE, "t1ha1_64be",  "Fast Positive Hash (portable, aims 64-bit, big-engian)", POOR },
   { t1ha0_32le_test,      64, 0x7F7D7B29, "t1ha0_32le",  "Fast Positive Hash (portable, aims 32-bit, little-endian)", POOR },
   { t1ha0_32be_test,      64, 0xDA6A4061, "t1ha0_32be",  "Fast Positive Hash (portable, aims 32-bit, big-endian)", POOR },
-
+  { ahash64_test,         64, 0x00000000, "ahash64",  "ahash 64bit", GOOD }, //Expected value set to zero because aHash does not adhere to a fixed output.
 #if __WORDSIZE >= 64
 # define TIFU_VERIF       0x644236D4
 #else
   // broken on certain travis
 # define TIFU_VERIF       0x0
 #endif
   // and now the quality hash funcs, slowest first
-- 
2.25.1

